"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _utils = require("../utils");

var _exception = _interopRequireDefault(require("../exception"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _default(instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception["default"]('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data,
        contextPath;

    if (options.data && options.ids) {
      contextPath = (0, _utils.appendContextPath)(options.data.contextPath, options.ids[0]) + '.';
    }

    if ((0, _utils.isFunction)(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = (0, _utils.createFrame)(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: (0, _utils.blockParams)([context[field], field], [contextPath + field, null])
      });
    }

    if (context && _typeof(context) === 'object') {
      if ((0, _utils.isArray)(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else if (global.Symbol && context[global.Symbol.iterator]) {
        var newContext = [];
        var iterator = context[global.Symbol.iterator]();

        for (var it = iterator.next(); !it.done; it = iterator.next()) {
          newContext.push(it.value);
        }

        context = newContext;

        for (var _j = context.length; i < _j; i++) {
          execIteration(i, i, i === context.length - 1);
        }
      } else {
        var priorKey;
        Object.keys(context).forEach(function (key) {
          // We're running the iterations one step out of sync so we can detect
          // the last iteration without have to scan the object twice and create
          // an itermediate keys array.
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1);
          }

          priorKey = key;
          i++;
        });

        if (priorKey !== undefined) {
          execIteration(priorKey, i - 1, true);
        }
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
}